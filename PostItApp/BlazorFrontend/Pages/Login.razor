@page "/login"

@using BlazorFrontend.Services
@using Serilog;

@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthState AuthState

<div class="login-container">
    <div class="login-box">
        <h3>Login</h3>

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label>Email:</label>
                <InputText @bind-Value="loginModel.Email" class="form-control" />
            </div>
            <div class="form-group">
                <label>Password:</label>
                <InputText @bind-Value="loginModel.Password" type="password" class="form-control" />
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Login</button>
                <button type="button" class="btn btn-secondary" @onclick="NavigateToRegister">Register</button>
            </div>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;

        bool success = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);
        Log.Information($"Login model: {loginModel}, success: {success}");

        if (success)
        {
            AuthState.LogIn();
            NavigationManager.NavigateTo("/home");
        }
        else
        {
            errorMessage = "Invalid username or password. Please try again.";
        }
    }

    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/register");
    }
}
