@page "/home"

@using BlazorFrontend.Services
@using BlazorFrontend.Models

@inject PostService PostService
@inject AuthService AuthService
@inject NavigationManager NavigationManager



<div class="main-container">
    <!--Left panel-->
    <div class="left-panel">
        <div class="profile-section">
            <img src="images/default-avatar.jpg" alt="Avatar" class="profile-img" />
            <h4>@userProfile.Name</h4>
            <p class="profile-bio">@userProfile.Bio</p>
            <div class="profile-stats">
                <div>
                    <strong>Posts:</strong> @userProfile.PostCount
                </div>
                <div>
                    <strong>Reactions:</strong> @userProfile.ReactionCount
                </div>
                <div>
                    <strong>Friends:</strong> @userProfile.FriendCount
                </div>
            </div>
        </div>
    </div>

    <!-- Main panel -->
    <div class="center-panel">

        <!--Post form -->
        <div class="add-post-form">
            <textarea @bind="newPostContent" placeholder="Write something..." class="post-textarea"></textarea>
            <button @onclick="AddPost" class="add-post-button">Publish</button>
        </div>

        <!-- Posts -->
        <div class="posts-container">
            @if (posts is null) 
            {
                <p>Loading...</p>
            }
            else 
            {
                @foreach (var post in posts)
                {
                    <div class="post">
                        <!-- Post header -->
                        <div class="post-header">
                            <div class="user-img">jpg</div>
                            <div class="post-info">
                                <strong>@post.UserName</strong><br />
                                <small>@post.CreatedAt</small>
                            </div>
                        </div>
                        <!-- Content -->
                        <div class="post-content">
                            @post.Content
                        </div>
                        <!-- Likes -->
                        <div class="post-actions">
                            <div>
                                <span>
                                    <button class="like-button">
                                        <i class="fas fa-thumbs-up"></i> @post.Likes
                                    </button>
                                </span>
                            </div>
                            <div>
                                <button class="like-button" @onclick="() => ToggleLike(post)">
                                    <i class="fas fa-thumbs-up"></i>
                                    @if (post.IsLikedByCurrentUser)
                                    {
                                        <span>You liked it!</span>
                                    }
                                    else
                                    {
                                        <span>Like it</span>
                                    }
                                </button>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    <!-- Right panel -->
    <div class="right-panel">
        <h4>Friends</h4>
        <ul class="friends-list">
            @foreach (var friend in friends)
            {
                <li>
                    <img src="images/default-avatar.jpg" alt="Avatar" class="friend-img" />
                    <span class="friend-name">@friend.Name</span>
                </li>
            }
        </ul>
    </div>
</div>

@code {
    // Posts 
    private List<BlazorFrontend.Models.PostModel> posts;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            posts = await PostService.GetUserAndFriendsPostsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching posts: {ex.Message}");
            posts = new List<PostModel>();
        }
    }

    // Like post logic
    private async Task ToggleLike(PostModel post)
    {
        var response = await PostService.ToggleLikePostAsync(post.Id);

        if (response.IsSuccessStatusCode)
        {
            post.IsLikedByCurrentUser = !post.IsLikedByCurrentUser;

            if (post.IsLikedByCurrentUser)
            {
                post.Likes += 1;
            }
            else
            {
                post.Likes -= 1;
            }
        }
        else
        {
            Console.WriteLine("Failed to toggle like for the post.");
        }
    }

    // New post content
    private string newPostContent = string.Empty;

    private async Task AddPost()
    {
        if (string.IsNullOrWhiteSpace(newPostContent))
            return;

        var newPost = new PostModel
            {
                Content = newPostContent,
                CreatedAt = DateTime.UtcNow,
                UserName = "You"
            };

        var response = await PostService.AddPostAsync(newPost);

        if (response.IsSuccessStatusCode)
        {
            posts.Insert(0, newPost); 
            newPostContent = string.Empty; 
        }
        else
        {
            Console.WriteLine("Failed to add post.");
        }
    }

   
    private List<Friend> friends = new List<Friend>
    {
        new Friend { Name = "Jan Kowalski" },
        new Friend { Name = "Anna Nowak" },
        new Friend { Name = "Tomasz Wiśniewski" }
    };

    private UserProfile userProfile = new UserProfile
        {
            Name = "Jan Kowalski",
            PostCount = 12,
            ReactionCount = 89,
            FriendCount = 34,
            Bio = "Witaj! Jestem miłośnikiem technologii i nowoczesnych rozwiązań."
        };

    private class Post
    {
        public string UserName { get; set; }
        public string Date { get; set; }
        public string Content { get; set; }
        public int Likes { get; set; }
        public List<Comment> Comments { get; set; }
    }

    private class Comment
    {
        public string UserName { get; set; }
        public string Content { get; set; }
        public string Date { get; set; }
    }

    private class Friend
    {
        public string Name { get; set; }
    }

    private class UserProfile
    {
        public string Name { get; set; }
        public int PostCount { get; set; }
        public int ReactionCount { get; set; }
        public int FriendCount { get; set; }
        public string Bio { get; set; }
    }
}
